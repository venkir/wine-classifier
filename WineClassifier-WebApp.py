#!/usr/bin/env python
# coding: utf-8

# ## PyCaret and Streamlit: Create and Deploy Wine Classifier Web App
# 
# Originally appeared in medium article by: Ruben Winastwan. The article can be found here at
# ```https://towardsdatascience.com/pycaret-and-streamlit-how-to-create-and-deploy-data-science-web-app-273d205271a3```

# ### Modified by: Venki Ramachandran as part of his Data Science Practise

# In[2]:


import pandas as pd
import numpy as np


# In[3]:


# Load the data set
wine_df = pd.read_csv("winequality-red.csv")


# In[4]:


wine_df.head()


# In[5]:


# What is the range of the quality column?
wine_df.quality.value_counts()


# In[6]:


# Is equal to and above 6 a good wine? Let us categorize it that way
# Change t he value in 'quality' to 'good' or 'bad' based on quality value
wine_df.quality = np.where(wine_df.quality >= 6,'Good', 'Bad')


# In[7]:


wine_df.head()


# ### Load PyCaret using the Terminal or the iTerm window
# 
# ```pip install pycaret```
# 
# <img src="./PyCaret-Install-MacOs.png">
# 
# Check and see if you get the above success message after install.
# 
# PyCaret is AWESOME...it is a low-code machine learning library that automates all of the machine learning workflows. What it does is that it provides a wrapper for popular machine learning libraries such as scikit-learn, XGBoost, LightGBM, CatBoost, and many more

# In[8]:


# Step1: setup the environment
from pycaret.classification import *
exp_clf01 = setup(data = wine_df, target = 'quality', session_id = 123)


# We passed the following parameters:
# 
#     * data — Our input data.
#     * target — The name of the feature that we want to predict (dependent variable).
#     * session_id — The identifier for our setup environment.

# 
# You need to take a look at the output carefully because there are times when the function infers the data types incorrectly. If you find that one of the feature is inferred incorrectly, you can correct it by doing the following:
# 
# ```exp_clf01 = setup(data = wine_df, target = 'quality', session_id = 123, categorical_features = ['feature1', 'feature2'], numerical_features = ['feature3', 'feature4'])```

# You can use categorical_features or numerical_features parameter to change the data types that are incorrectly inferred by setup() function

# In[9]:


# Building a machine learning model
# With PyCaret, you’re able to compare the performance of 
# different kinds of classification models with literally single line of code
best = compare_models()


# ### Experiment 2: Tuned Setup
# Before we go further, let’s see whether we can improve the performance of the models by tuning our setup() function.

# In[11]:


exp_clf102 = setup(data = wine_df, target = 'quality',session_id=123, normalize = True, transformation = True)


# In[12]:


# Let us try the best command again
best = compare_models()


# ### Normalize and Transform the features
# We passed several additional parameters there to tune our setup:
# 
#     * normalize — To transform our features by scaling them to a given range.
#     * transformation — To transform our features such that our data can be represented by  a normal distribution. This can be helpful for models like Logistic Regression, LDA, or Gaussian Native Bayes.
# 
# Also note that we use the same session_id as our previous setup() function. This is to make sure that all of the future improvements on the model are solely due to the change that we’ve implemented in this setup() function.
# 
# As you can see, most of the metrics are slightly improved after we tuned the setup. Before we tuned the setup, the F1 score of Extra Tree classifier is 0.8306. After we tuned the setup, the F1 score becomes 0.8375.
# 

# In[13]:


# Based on this result, let’s build our Extra Tree classifier. We can do this with a single line of code
et_model = create_model('et')


# In[15]:


# Next, you can evaluate your model by looking at the visualization of the ROC curve, 
# feature importance, or confusion matrix of your model.
evaluate_model(et_model)

# Click on each of the buttons on the Plot Type and see the magic


# We can now use our ```Extra Tree classifier``` to predict the test data that has been generated by PyCaret. As mentioned earlier, soon after we executed the setup() function at the very first step, PyCaret will automatically split our data into training data and test data. All of the model performance and evaluation metrics that we’ve seen above are solely based on the training data.
# 
# To use the model to predict the test data, we can use the predict_model function

# In[16]:


predict_model(et_model)


# ### Test Data
# 
# Make sure that the number of rows above = 480 which is the rows in the test data when PyCaret automatically split it into train and test data set.

# In[17]:


# Let us save the model
save_model(et_model, model_name = 'extra_tree_model')


# ## Build the Web App with Streamlit
# 
# Now it’s time for us to build our wine classifier web app. In this post, we’re going to use Streamlit to build the web app as it is more beginner friendly than Flask.
# 
# ```pip install streamlit```
# 
# <img src="./streamlit_install.png">

# The first thing that we need to do is importing all of the relevant libraries. Note that we’re going to use the Extra Tree classifier model that we’ve saved before using PyCaret. To load the model and to make a prediction using the saved model, we can use load_model and predict_model functions from PyCaret

# In[24]:


# Load the libraries and set the landing page
from pycaret.classification import load_model, predict_model
import streamlit as st
import pandas as pd
import numpy as np


def predict_quality(model, df):
    
    predictions_data = predict_model(estimator = model, data = df)
    return predictions_data['Label'][0]
    
model = load_model('extra_tree_model')


st.title('Wine Quality Classifier Web App')
st.subheader('Life is too short to drink Bad Wine - Old Jungle Saying!!')
st.write(
    "This is a web app to classify the quality of your wine based on\n"
    "several features that you can see in the sidebar. Please adjust the\n"
    "value of each feature. After that, click on the Predict button at the bottom to\n"
    "see the prediction of the classifier.\n\n"
    "Coding details originally appreared in medium article by Ruben Winastwan, All credit goes to him.\n\n"
    "Modified By: Venki Ramachandran on 12-May-2021."
)


# Next, we need to let the user to specify the value of our features. Since our features are all numeric features, it will be best to represent them with a slider widget. To create a slider widget, we can use slider() function from Streamlit

# In[25]:


# Allow the user to select new features for prediction
fixed_acidity = st.sidebar.slider(label = 'Fixed Acidity', min_value = 4.0,
                          max_value = 16.0 ,
                          value = 10.0,
                          step = 0.1)

volatile_acidity = st.sidebar.slider(label = 'Volatile Acidity', min_value = 0.00,
                          max_value = 2.00 ,
                          value = 1.00,
                          step = 0.01)
                          
citric_acid = st.sidebar.slider(label = 'Citric Acid', min_value = 0.00,
                          max_value = 1.00 ,
                          value = 0.50,
                          step = 0.01)                          

residual_sugar = st.sidebar.slider(label = 'Residual Sugar', min_value = 0.0,
                          max_value = 16.0 ,
                          value = 8.0,
                          step = 0.1)

chlorides = st.sidebar.slider(label = 'Chlorides', min_value = 0.000,
                          max_value = 1.000 ,
                          value = 0.500,
                          step = 0.001)
   
f_sulf_diox = st.sidebar.slider(label = 'Free Sulfur Dioxide', min_value = 1,
                          max_value = 72,
                          value = 36,
                          step = 1)

t_sulf_diox = st.sidebar.slider(label = 'Total Sulfur Dioxide', min_value = 6,
                          max_value = 289 ,
                          value = 144,
                          step = 1)

density = st.sidebar.slider(label = 'Density', min_value = 0.0000,
                          max_value = 2.0000 ,
                          value = 0.9900,
                          step = 0.0001)

ph = st.sidebar.slider(label = 'pH', min_value = 2.00,
                          max_value = 5.00 ,
                          value = 3.00,
                          step = 0.01)
                          
sulphates = st.sidebar.slider(label = 'Sulphates', min_value = 0.00,
                          max_value = 2.00,
                          value = 0.50,
                          step = 0.01)

alcohol = st.sidebar.slider(label = 'Alcohol', min_value = 8.0,
                          max_value = 15.0,
                          value = 10.5,
                          step = 0.1)


# Next we need to convert all of those user input values into a dataframe. Then, we can use the dataframe as the input of our model’s prediction

# In[26]:


features = {'fixed acidity': fixed_acidity, 'volatile acidity': volatile_acidity,
            'citric acid': citric_acid, 'residual sugar': residual_sugar,
            'chlorides': chlorides, 'free sulfur dioxide': f_sulf_diox,
            'total sulfur dioxide': t_sulf_diox, 'density': density,
            'pH': ph, 'sulphates': sulphates, 'alcohol': alcohol
            }
 

features_df  = pd.DataFrame([features])

st.table(features_df)  

if st.button('Predict'):
    
    prediction = predict_quality(model, features_df)
    
    st.write(' Based on feature values, your wine quality is '+ str(prediction))


# ### Convert notebook to python script
# 
# To convert the notebook to a python script:
#     1. First, convert you notebook with .ipynb extension to a .py extension
#     2. Use 'juypter nbconvert WineClassifier-WebApp.ipynb --to script
#     3. You should get the below outpt and check if a file exists called ```WineClassifier-WebApp.py```
#     
# <img src="./notebook_convert_to_script.png">
# 
# ### Deployment to localhost (your PC)
# To check your web app, you need to open your prompt, then go to the working directory of your Python file.
# In the working directory of your Python file, type the following:
# 
# ```streamlit run WineClassifier-WebApp.py```
# 
# Run the above command without the & as you have to answer some prompts. wait until you see
# 
# <img src="./streamlit_deploy_success.png">
# 
# Automatically opens the http://localhost:8501 in your default browser. It should look like the below screen:
# 
# <img src="./localhost_landing_page.png">

# In[ ]:





# In[ ]:




